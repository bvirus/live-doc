var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "slider", function () {
  return slider;
});
_parcelHelpers.export(exports, "rangeSlider", function () {
  return rangeSlider;
});
_parcelHelpers.export(exports, "createSlider", function () {
  return createSlider;
});
var _util = require('./util');
var _drag = require('./drag');
var _dimensions = require('./dimensions');
var _traits = require('./traits');
function slider(sendEvent, element) {
  const slider = createSlider();
  return {
    ..._traits.fromTraits([_drag.withDraggable(sendEvent, element, 'x', element), _traits.withClass(element, '_live_group'), // add clearfix hack
    _traits.withChild(element, slider.container)]),
    ...slider
  };
}
function rangeSlider(sendEvent, element) {
  const slider = createSlider();
  let command = false;
  let handle = null;
  function next(value, store) {
    if (handle === 0 && store[1] < value) handle = 1; else if (handle === 1 && store[0] > value) handle = 0;
    let ret = store.slice();
    ret[handle] = value;
    return ret;
  }
  function nextRange(store, draw = false) {
    switch (this.type) {
      case 'start':
        if (command || draw) {
          handle = 1;
          return [this.value, this.value];
        }
        handle = 0;
        if (Math.abs(this.value - store[0]) > Math.abs(this.value - store[1])) handle = 1;
        return next(this.value, store);
      case 'move':
        return next(this.value, store);
      case 'stop':
        return next(this.value, store);
      default:
        return next(this.value, store);
    }
  }
  const sliderTraits = _traits.fromTraits([_traits.withEvent(element, 'mousedown', ev => {
    command = ev.ctrlKey || ev.shiftKey || ev.metaKey || ev.button === 2;
    if (ev.button === 2 || ev.ctrlKey) window.addEventListener('contextmenu', _util.cancelEvent, {
      once: true
    });
  }), _drag.withDraggable(ev => {
    ev.nextRange = nextRange.bind(ev);
    sendEvent(ev);
  }, element, 'x', element), _traits.withEvent(window, 'mouseup', e => {
    command = false;
  }), _traits.withClass(element, '_live_group'), // add clearfix hack
  _traits.withChild(element, slider.container)]);
  return {
    ...sliderTraits,
    ...slider
  };
}
function createSlider(axis = 'x') {
  let container = document.createElement('div');
  container.classList.add('live-slider');
  let {primary, secondary} = _dimensions.dimensions[axis];
  Object.assign(container.style, {
    position: "relative",
    display: "inline-block",
    [primary.dimension]: "100%",
    minHeight: "10px"
  });
  // let backgroundBoundary = createBoundary(container, axis)
  let background = document.createElement("span");
  background.classList.add('live-slider-background');
  Object.assign(background.style, {
    position: "absolute",
    [primary.dimension]: "100%",
    [secondary.dimension]: "100%"
  });
  // backgroundBoundary.setPrimary(0,0)
  let fill = document.createElement("span");
  fill.classList.add('live-slider-fill');
  Object.assign(fill.style, {
    position: 'absolute',
    [secondary.dimension]: "100%",
    [primary.position.start]: 0,
    [secondary.position.start]: 0
  });
  background.appendChild(fill);
  container.appendChild(background);
  function setFill(x) {
    fill.style[primary.position.end] = x * 100 + "%";
    fill.style[primary.position.start] = "0%";
    fill.style[secondary.dimension] = container[secondary.client] + "px";
  }
  function setRange([x, y]) {
    fill.style[primary.position.start] = x * 100 + "%";
    fill.style[primary.position.end] = (1 - y) * 100 + "%";
  }
  return {
    container,
    setFill,
    setRange
  };
}
