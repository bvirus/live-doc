var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "withDraggable", function () {
  return withDraggable;
});
_parcelHelpers.export(exports, "makeDraggable", function () {
  return makeDraggable;
});
var _utilJs = require('./util.js');
var _traits = require('./traits');
var _dimensions = require('./dimensions');
function withDraggable(sendEvent, element, axis = "x", container = window) {
  const ori = _dimensions.createOrientation(axis);
  function computeValue(ev) {
    let pos = ori.getPositionOnAxis(ev);
    let zeroPos = ori.getMin(element);
    let maxPos = ori.getMax(container);
    return {
      event: ev,
      value: _utilJs.clamp((pos - zeroPos) / maxPos, 0, 1)
    };
  }
  const startDragging = _traits.fromTraits([_utilJs.cancelEvent, _traits.withClass(element, 'live-active'), _traits.withEvent(window, 'mousemove', ev => {
    _utilJs.cancelEvent(ev);
    sendEvent({
      type: 'move',
      ...computeValue(ev)
    });
  }), () => {
    sendEvent({
      type: 'start',
      ...computeValue(ev)
    });
    return () => sendEvent({
      type: 'stop',
      ...computeValue(ev)
    });
  }]);
  function dragStart(ev) {
    _utilJs.cancelEvent(ev);
    const stop = startDragging(ev);
    window.addEventListener('mouseup', e => {
      _utilJs.cancelEvent(e);
      stop(e);
    }, {
      once: true
    });
  }
  return _traits.fromTraits([_traits.withEvent(element, 'mousedown', dragStart), _traits.withClass(element, 'live')]);
}
const makeDraggable = withDraggable;
